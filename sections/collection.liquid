<!-- /sections/collections.liquid -->
{{ 'collection-tabs.css' | asset_url | stylesheet_tag }}

{%- liquid
  assign color_scheme = 'color-' | append: section.settings.color_scheme

  if filter_layout == 'inline-open'
    assign filters_expanded = true
  endif
  comment
    The product limit decrement will be removed once we add more block types
  endcomment

  assign product_limit = section.settings.products_per_page
  assign blocks_featured_image = section.blocks | where: "type", "featured_image"

  assign columns_desktop = section.settings.grid | plus: 0
  assign columns_medium = 3
  assign columns_small = 2
  assign columns_mobile = section.settings.grid_mobile | plus: 0

  if columns_desktop == 2 or columns_desktop == 4
    assign columns_medium = 2
  endif

  assign animation_anchor = '.collection-' | append: collection.handle
  assign animation_duration = 800
-%}

{%- capture image_sizes -%}
  {%- if settings.grid_style == 'compact' -%}
    (min-width: 990px) calc((100vw) / {{ columns_desktop }}), (min-width: 750px) calc((100vw) / {{ columns_medium }}), (min-width: 480px) calc(100vw / {{ columns_small }}), calc(100vw / {{ columns_mobile }})
  {%- else -%}
    (min-width: 990px) calc((100vw - 100px) / {{ columns_desktop }} - 32px), (min-width: 750px) calc((100vw - 64px) / {{ columns_medium }} - 32px), (min-width: 480px) calc((100vw - 32px) / {{ columns_small }}), calc((100vw - 32px) / {{ columns_mobile }})
  {%- endif -%}
{%- endcapture -%}

{%- style -%}
  #Collection--{{ section.id }} {
  --PT: {{ section.settings.padding_top }}px;
  --PB: {{ section.settings.padding_bottom }}px;

  --COLUMNS: {{ columns_desktop }};
  --COLUMNS-MEDIUM: {{ columns_medium }};
  --COLUMNS-SMALL: {{ columns_small }};
  --COLUMNS-MOBILE: {{ columns_mobile }};

  {% unless border_color == 'rgba(0,0,0,0)' or border_color == blank %}
    --border-hairline: {{ border_color }};
  {% endunless %}
  }
{%- endstyle -%}

{%- assign featured_images_array = '' -%}

{%- for block in section.blocks -%}
  {% if block.type == "featured_image" %}

    {%- capture current_featured_image -%}
      {%- liquid
        assign featured_image = block.settings.featured_image
        assign featured_image_position = block.settings.position
        assign featured_image_order = featured_image_position | append: '-' | append: forloop.index

        if featured_image_position < 10
          assign featured_image_order = featured_image_order | prepend: '0'
        endif
      -%}
      {%- render 'collection-featured-image' block: block -%}
    {%- endcapture -%}

    {%- assign featured_images_array = featured_images_array | append: featured_image_order | append: '#featured_image_position#' | append: featured_image_position | append: '#featured_image_html#' | append: current_featured_image | append: '#featured_image#' | append: featured_image | append: '@@' -%}
  {% endif %}
{%- endfor -%}

{%- assign featured_images_array = featured_images_array | split: '@@' | sort -%}
<section class="collection-tabs col-12" id="collection-tabs">
  <div class="grid-outer">
    <nav class="collection-tab__wrapper">
      {% for block in section.blocks %}
        {% if collection.products_count > 0 and collection.handle != 'frontpage' and block.type == "product_section" %}
          <button
                  class="collection-tabs__button custom-checkbox-label"
                  data-collection-handle="{{ block.settings.collection.handle }}"
                  data-collection-url="{{ shop.url }}{{ block.settings.collection.url | default: '/collections/all' }}"
          >
            <h1>{{ block.settings.tag_name }}</h1>
          </button>
        {% endif %}
      {% endfor %}
    </nav>
  </div>
</section>
<section class="collection collection-products collection-{{ collection.handle }} section-padding {{ color_scheme }}"
         id="Collection--{{ section.id }}"
         data-section-id="{{ section.id }}"
         data-section-type="collection"
         data-collection="{{ collection.url | default: '/collections/all' }}">
  <div class="collection__products">
    <div class="grid-outer" data-products-grid>
      <div class="grid" id="CollectionLoop">
        {%- if collection.products_count > 0 -%}
          {%- if featured_images_array.size > 0 -%}
            {%- liquid
              assign counter_grid = 1
              assign counter_delay = 0
              assign added_images_index = ''
              assign items_on_row_remaining = columns_desktop

              for product in collection.products
                for featured_image in featured_images_array
                  if featured_image == ''
                    continue
                  endif

                  assign featured_image_index = forloop.index
                  assign featured_image_position = featured_image | split: '#featured_image_position#' | last | split: '#featured_image_html#' | first | times: 1
                  assign featured_image_markup = featured_image | split: '#featured_image_html#' | last | split: '#featured_image#' | first
                  assign featured_image_index_tag = '@' | append: featured_image_index | append: '@'
                  
                  if featured_image_position == counter_grid
                    unless added_images_index contains featured_image_index_tag
                      assign counter_grid = counter_grid | plus: 1
                      assign added_images_index = added_images_index | append: '@' | append: featured_image_index | append: '@#'

                      echo featured_image_markup
                    endunless
                  endif
                endfor

                assign counter_delay = counter_delay | plus: 1
                assign counter_grid = counter_grid | plus: 1
                assign items_on_row_remaining = items_on_row_remaining | minus: 1

                if collection
                  render 'product-grid-item', product: product, index: forloop.index, sizes: image_sizes
                endif
              endfor


              for featured_image in featured_images_array
                if featured_image == ''
                  continue
                endif

                assign featured_image_index = forloop.index
                assign featured_image_position = featured_image | split: '#featured_image_position#' | last | split: '#featured_image_html#' | first | times: 1
                assign featured_image_markup = featured_image | split: '#featured_image_html#' | last | split: '#featured_image#' | first
                assign featured_image_index_tag = '@' | append: featured_image_index | append: '@'
              
                
                  unless added_images_index contains featured_image_index_tag
                    assign counter_grid = counter_grid | plus: 1
                    assign added_images_index = added_images_index | append: '@' | append: featured_image_index | append: '@#'

                    echo featured_image_markup
                  endunless
                
              endfor
            -%}

          {%- else -%}
            {%- for product in collection.products -%}
              {%- unless product.tags contains 'hidden-product' -%}
                {%- assign grid_int = section.settings.grid | times: 1 -%}
                {%- assign animation_delay = forloop.index0 | modulo: grid_int | times: 1 -%}
                {%- render 'product-grid-item', product: product, animation_delay: animation_delay, index: forloop.index, sizes: image_sizes -%}
              {%- endunless -%}

            {%- endfor -%}
          {%- endif -%}
        {%- else -%}
          <div class="no-results">
            <p><strong>{{ 'collections.general.no_matches' | t }}</strong></p>
          </div>
        {%- endif -%}
      </div>

      <div class="grid__loader">
        <div class="loader grid__loader-line">
          <div class="loader-indeterminate"></div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const collectionTabs = document.getElementById('collection-tabs');
        const productsOuter = document.querySelector('[data-products-grid]');
        const path = window.location.pathname;
        const handle = path.replace(/^\/collections\//, '').replace(/\/$/, '');

        function fetchCollectionProducts(collectionHandle) {
            productsOuter.classList.add('is-loading')
            setTabActive(collectionHandle)

            // Fetch for specific collection
            fetch(`/collections/${collectionHandle}?view=collection`)
                .then(response => response.text())
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, "text/html");
                    const productGrid = document.getElementById('CollectionLoop');
                    productsOuter.classList.remove('is-loading')
                    productGrid.innerHTML = doc.querySelector('#CollectionLoop').innerHTML;
                    updateURL(collectionHandle, doc.title);
                })
                .catch(error => {
                    console.error(`Error loading ${collectionHandle} products:`, error);
                });
        }

        function updateURL(collectionHandle, title) {
            // Update URL without page reload
            history.pushState(
                null,
                title,
                `/collections/${collectionHandle}?view=collection`
            );
            document.title = `${title}`;

        }

        function setTabActive(collectionHandle) {
            const tabs = document.querySelectorAll('.collection-tabs__button');

            tabs.forEach(tab => {
                tab.classList.remove('active');
                if (tab.dataset.collectionHandle === collectionHandle) {
                    tab.classList.add('active');
                }
            });
        }

        collectionTabs.addEventListener('click', function (event) {
            const tab = event.target.closest('.collection-tabs__button');
            if (tab) {
                // Remove active state from all tabs
                document.querySelectorAll('.collection-tabs__button').forEach(t =>
                    t.classList.remove('active')
                );

                // Add active state to clicked tab
                tab.classList.add('active');

                // Get collection handle
                const collectionHandle = tab.dataset.collectionHandle;

                // Fetch products based on collection handle
                fetchCollectionProducts(collectionHandle);
            }
        });
        // Add to Cart functionality
        fetchCollectionProducts(handle)
    });
</script>

{% if section.settings.hide_qty_box == true%}
  <style>
    .quick-add__wrapper{
      display: flex;
      justify-content: center;
    }
    .quick-add__wrapper quantity-counter{
      display:none;
    }
  </style>
{% endif %}

{% schema %}
{
  "name": "Collection products",
  "settings": [
    {
      "type": "checkbox",
      "id": "add_to_cart_the_first_selected_option",
      "label": "Add to cart the first selected option",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "hide_qty_box",
      "label": "Hide qty box",
      "default": false
    },
    {
      "type": "header",
      "content": "Product grid"
    },
    {
      "type": "range",
      "id": "grid",
      "label": "Products per row on desktop",
      "min": 2,
      "max": 6,
      "step": 1,
      "default": 3
    },
    {
      "type": "radio",
      "id": "grid_mobile",
      "label": "Products per row on mobile",
      "options": [
        {
          "value": "1",
          "label": "One"
        },
        {
          "value": "2",
          "label": "Two"
        }
      ],
      "default": "2"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "default": "scheme_1",
      "label": "Color scheme"
    },
    {
      "type": "header",
      "content": "Padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "Top",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "Bottom",
      "default": 0
    }
  ],
  "blocks": [
    {
      "type": "product_section",
      "name": "Product Section",
      "limit": 10,
      "settings": [
        {
          "type": "collection",
          "id": "collection",
          "label": "Collection"
        },
        {
          "type": "text",
          "id": "tag_name",
          "label": "Collection Tag Name"
        }
      ]
    },
    {
      "type": "featured_image",
      "limit": 3,
      "name": "Featured image",
      "settings": [
        {
          "type": "image_picker",
          "id": "featured_image",
          "label": "Image"
        },
        {
          "type": "range",
          "id": "position",
          "label": "Image position",
          "min": 1,
          "max": 24,
          "step": 1,
          "default": 1
        },
        {
          "type": "header",
          "content": "Typography"
        },
        {
          "type": "text",
          "id": "featured_heading",
          "label": "Heading",
          "default": "Featured link"
        },
        {
          "type": "select",
          "id": "heading_font_size",
          "label": "Heading size",
          "default": "heading-large",
          "options": [
            {
              "value": "heading-mini",
              "label": "Mini"
            },
            {
              "value": "heading-x-small",
              "label": "Extra small"
            },
            {
              "value": "heading-small",
              "label": "Small"
            },
            {
              "value": "heading-medium",
              "label": "Medium"
            },
            {
              "value": "heading-large",
              "label": "Large"
            },
            {
              "value": "heading-x-large",
              "label": "Extra large"
            }
          ]
        },
        {
          "type": "richtext",
          "id": "featured_text",
          "label": "Text",
          "default": "<p>Promote products or collections</p>"
        },
        {
          "type": "header",
          "content": "Button"
        },
        {
          "type": "text",
          "id": "featured_button_text",
          "label": "Label",
          "default": "Learn more"
        },
        {
          "type": "url",
          "id": "featured_button_link",
          "label": "Link"
        },
        {
          "type": "select",
          "id": "button_type",
          "label": "Color",
          "default": "btn--primary",
          "options": [
            {
              "value": "btn--black",
              "label": "Black"
            },
            {
              "value": "btn--white",
              "label": "White"
            },
            {
              "value": "btn--primary",
              "label": "Primary"
            },
            {
              "value": "btn--secondary",
              "label": "Secondary"
            }
          ]
        },
        {
          "type": "select",
          "id": "button_size",
          "label": "Size",
          "default": "",
          "options": [
            {
              "label": "Small",
              "value": "btn--small"
            },
            {
              "label": "Medium",
              "value": ""
            },
            {
              "label": "Large",
              "value": "btn--large"
            }
          ]
        },
        {
          "type": "select",
          "id": "button_style",
          "label": "Style",
          "default": "btn--outline",
          "options": [
            {
              "label": "Solid",
              "value": "btn--solid"
            },
            {
              "label": "Outline",
              "value": "btn--outline"
            },
            {
              "label": "Text",
              "value": "btn--text"
            }
          ]
        },
        {
          "type": "checkbox",
          "id": "show_arrow",
          "label": "Show button arrow",
          "default": false
        },
        {
          "type": "header",
          "content": "Colors"
        },
        {
          "type": "paragraph",
          "content": "Overrides color scheme. Set to Transparent to revert back to using color schemes."
        },
        {
          "type": "color",
          "id": "featured_color_text",
          "label": "Text",
          "default": "#ffffff"
        },
        {
          "type": "color",
          "id": "featured_color_overlay",
          "label": "Overlay",
          "default": "#222222"
        },
        {
          "type": "range",
          "id": "featured_overlay_opacity",
          "label": "Overlay opacity",
          "step": 5,
          "max": 100,
          "min": 0,
          "unit": "%",
          "default": 10
        },
        {
          "type": "header",
          "content": "Advanced"
        },
        {
          "type": "select",
          "id": "heading_tag",
          "label": "Heading SEO tag",
          "default": "automatic",
          "options": [
            {
              "value": "automatic",
              "label": "Automatic"
            },
            {
              "value": "h1",
              "label": "H1"
            },
            {
              "value": "h2",
              "label": "H2"
            },
            {
              "value": "h3",
              "label": "H3"
            },
            {
              "value": "h4",
              "label": "H4"
            },
            {
              "value": "h5",
              "label": "H5"
            },
            {
              "value": "h6",
              "label": "H6"
            }
          ]
        }
      ]
    }
  ]
}
{% endschema %}
